#include<stdio.h>
#include<string.h>
#include <stdlib.h>
#define TAM 3
int cadastrados = 0;
struct agenda
{
    char nome[30], endereco[100], fone[10];
    long int cep;
    int id;
};
int menu();
void cadastro(struct agenda ag[]);
void busca(struct agenda ag[]);
void lista(struct agenda ag[]);
void exclui(struct agenda ag[]);

int main()
{
    struct agenda a[TAM];
    int op;
    do
    {
        op = menu();
        if(op == 1)
            cadastro(a);
        else if(op == 2)
            busca(a);
        else if(op == 3)
            lista(a);
            else if(op == 4)
            exclui(a);
            
    }while(op != 5);
}

int menu()
{
    int m, flag = 0;
    do
    {
        printf("\n==== Menu ====");
        printf("\n1 - Cadastro");
        printf("\n2 - Busca");
        printf("\n3 - Lista");
        printf("\n4 - Exclui");
        printf("\n5 - Sair");
        if(flag == 0)
        {
            printf("\nDigite a opcao: ");
            scanf("%d", &m);
            flag = 1;
        }
        else
        {
            printf("\nOpcao invalida! Digite novamente: ");
            scanf("%d", &m);
        }
    }while(m < 1 || m > 5);
    return m;
}
void cadastro(struct agenda ag[])
{
    printf("\n==== Registro %d ====", cadastrados + 1);
    ag[cadastrados].id = cadastrados+1;
    printf("\nId: %d ",ag[cadastrados].id);
    printf("\nNome: ");
    setbuf(stdin, NULL);
    fgets(ag[cadastrados].nome, 30, stdin);
    printf("\nEndereco: ");
    setbuf(stdin, NULL);
    fgets(ag[cadastrados].endereco, 100, stdin);
    printf("\nFone: ");
    setbuf(stdin, NULL);
    fgets(ag[cadastrados].fone, 10, stdin);
    printf("\nCEP: ");
    scanf("%ld", &ag[cadastrados].cep);
    cadastrados++;
    system("cls");
}
void busca(struct agenda ag[])
{
    int i, achou = 0;
    char busca_nome[30];
    if(cadastrados == 0)
        printf("\nAgenda vazia!");
    else
    {
        printf("\nBuscar nome: ");
        setbuf(stdin, NULL);
        fgets(busca_nome, 30, stdin);
        for(i=0;i<cadastrados;i++)
        {
            if(strcmp(busca_nome, ag[i].nome) == 0)
            {
                printf("\n==== Registro %d ====", i + 1);
                printf("\nId: %d", ag[i].id);
                printf("\nNome: %s", ag[i].nome);
                printf("\nEndereco: %s", ag[i].endereco);
                printf("\nFone: %s", ag[i].fone);
                printf("\nCEP: %ld", ag[i].cep);
                achou = 1;
            }
        }
        if(achou == 0)
            printf("\nNome nao encontrado!");
    }
}
void lista(struct agenda ag[])
{
    int i;

    if(cadastrados == 0)
        printf("\nAgenda vazia!");
    else
    {
        for(i=0;i<cadastrados;i++)
        {
            printf("\n==== Registro %d ====", i + 1);
            printf("\nId: %d", ag[i].id);
            printf("\nNome: %s", ag[i].nome);
            printf("\nEndereco: %s", ag[i].endereco);
            printf("\nFone: %s", ag[i].fone);
            printf("\nCEP: %ld", ag[i].cep);
        }
    }
}

void exclui(struct agenda ag[])
{
    int i, j, achou = 0;
    int busca_id;
    if(cadastrados == 0)
        printf("\nAgenda vazia!");
    else
    {
        printf("\nBusca Id: ");
        setbuf(stdin, NULL);
        scanf("%d" , &busca_id);
        for(i = 0; i < cadastrados; i++)
        {
            if(busca_id == ag[i].id)
            {
                printf("\n==== Registro Excluido %d ====", i + 1);
                achou = 1;

                // Reorganiza o array movendo os registros para trás
                for(j = i; j < cadastrados - 1; j++)
                {

                    ag[j] = ag[j + 1];
                    ag[j].id = ag[j - 1].id+1;

                }

                cadastrados--; // Decrementa o número de cadastros
                break; // Sai do loop após excluir
            }
        }
        if(achou == 0)
            printf("\nId nao encontrado!");
    }
}
